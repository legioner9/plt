### UP
[raise](##raise)
[MAIN](##MAIN)
[MAIN_ru](##MAIN_ru)
[ANCORS](##ANCORS)
[ISU](##ISU)
[inet](##A_inet)
[inet](##books_inet)
[inet](##examples_inet)
[inet](##classic_inet)
[inet](##enters_inet)
[inet](##issue_code_inet)
[H_FILE](##H_FILE)
[p_SYNOPSIS](##p_SYNOPSIS)
[p_RETURN](##p_RETURN)
[p_RETURN_ru](##p_RETURN_ru)
[p_BUGS](##p_BUGS)
[p_DESCRIPTION_ru](##p_DESCRIPTION_ru)
[p_DESCRIPTION](##p_DESCRIPTION)
[p_MIRRORS](##p_MIRRORS)
[p_EXAMPLES](##p_EXAMPLES)
[p_CODE_h](##p_CODE_h)
[p_CODE_c](##p_CODE_c)
[p_CODE_m](##p_CODE_m)
[p_ERRORS](##p_ERRORS)
[p_BOOKS](##p_BOOKS)
[p_BOOKS_ru](##p_BOOKS_ru)
[p_CONTENT](##p_CONTENT)

[cat_hfiles](../../cat_hfiles.md)
[cat_utils](../../cat_utils.md)
[cat_structs](../../cat_structs.md)
[cat_param](../../cat_params.md)
[cat_macros](../../cat_macross.md)
[cat_const](../../cat_consts.md)
[cat_type](../../cat_types.md)
[cat_any](../cat_anys.md)


[UP](###UP)
## MAIN
:raise:
[next](##MAIN_ru)

<<MAIN>>
[MAIN](../../fills/raise/MAIN)



[UP](###UP)
## MAIN_ru
:raise:
[next](##ANCORS)

<<MAIN_ru>>
[MAIN_ru](../../fills/raise/MAIN_ru)

[UP](###UP)
## ANCORS
:raise:
[next](##ISU)

----------------------------------------------------- 
-------------------------------------- 
https://www.tutorialspoint.com/c_standard_library/c_function_raise.htm
-------------------------------------- 
----------------------------------------------------- 
<<ANCORS>>
[ANCORS](../../fills/raise/ANCORS)

[UP](###UP)
## ISU
:raise:
[next](##H_FILE)

----------------------------------------------------- 
-------------------------------------- 
file:///home/st/start/communis/Deploy_store/.qa/main_repo_fn/dir_c_/_c_/_man/nbase/_Head_sis_libs_posix/30_2_signal_h/example/study_cpjs/raise.isu
-------------------------------------- 
----------------------------------------------------- 
<<ISU>>
only read
:raise:
[ISU](../../contents)
[next](##inet)


[UP](###UP)
## inet
:raise:
[next](##H_FILE)


[UP](###UP)
## A_inet
[manpages.org](https://www.google.ru/search?q=raise+site%3Ahttps%3A%2F%2Fmanpages.org)
[reposcope.com_ru](https://www.google.ru/search?q=raise+site%3Ahttps%3A%2F%2Freposcope.com%2Fmanpages%2Fru)
[pubs.opengroup.org](https://www.google.com/search?q=raise+https%3A%2F%2Fpubs.opengroup.org)
[manpages.debian.org](https://yandex.ru/search/?text=raise+site%3Ahttps%3A%2F%2Fmanpages.debian.org%2F)
[www.opennet.ru](http://www.opennet.ru/man.shtml?category=2&topic=raise)
[man7.org](https://www.google.ru/search?q=raise+site%3Ahttps%3A%2F%2Fman7.org%2Flinux%2Fman-pages)
[en.cppreference.com](https://www.google.com/search?q=raise+en.cppreference.com)
[www.mankier.com](https://www.mankier.com/?q=raise)
[www.codecogs.com](https://www.google.ru/search?q=raise+https%3A%2F%2Fwww.codecogs.com%2Flibrary%2Fcomputing%2F)
[digitalmars.com](https://www.google.ru/search?q=raise+https%3A%2F%2Fdigitalmars.com%2Frtl%2F)


[UP](###UP)
## books_inet
[cpp.com.ru](https://yandex.ru/search/?text=raise+site%3Ahttps%3A%2F%2Fcpp.com.ru)
[linuxhint.com](https://www.google.ru/search?q=raise+site%3Ahttps%3A%2F%2Flinuxhint.com)
[gnu.org](https://www.google.ru/search?q=raise+site%3Ahttps%3A%2F%2Fwww.gnu.org%2Fsoftware%2Flibc%2Fmanual)

[UP](###UP)
## examples_inet
[yandex:examples](https://yandex.ru/search/?text=raise+example+in+c)
[docs.oracle.com](https://www.google.com/search?q=raise+https%3A%2F%2Fdocs.oracle.com)
[manpages.debian.org](https://yandex.ru/search/?text=raise+site%3Ahttps%3A%2F%2Fmanpages.debian.org%2F)
[osr507doc.xinuos.com](https://www.google.com/search?q=raise+http%3A%2F%2Fosr507doc.xinuos.com%2Fen%2Fman)
[cpp.hotexamples.com](https://cpp.hotexamples.com/examples/-/-/raise/cpp-raise-function-examples.html)
[all-ht.ru](https://yandex.ru/search/?text=raise+site%3Ahttp%3A%2F%2Fall-ht.ru%2Finf%2Fprog%2Fc%2F)
[cppreference.com](https://yandex.ru/search/?text=raise+site%3Ahttps%3A%2F%2Fen.cppreference.com%2Fw%2Fc%2F)

[UP](###UP)
## classic_inet
[bogatyrev_c_unix](https://www.google.com/search?q=raise+site%3Ahttps%3A%2F%2Fcpp.com.ru%2Fbogatyrev_c_unix)
[kr_cbook](https://www.google.com/search?q=raise+site%3Ahttps%3A%2F%2Fcpp.com.ru%2Fkr_cbook)

[UP](###UP)
## enters_inet
[pubs.opengroup.org](https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html)

[UP](###UP)
## issue_code_inet
[code.woboq.org](https://www.google.com/search?h=&sitesearch=https%3A%2F%2Fcode.woboq.org%2Fuserspace%2Fglibc%2F&q=raise)


[UP](###UP)
## H_FILE 
[signal_h.md](../../hfiles/signal_h.md)


[UP](###UP)
## p_SYNOPSIS
:raise:
[next](##p_RETURN_ru)

----------------------------------------------------- 
-------------------------------------- 
#include <signal.h>
int raise(int sig);
-------------------------------------- 
----------------------------------------------------- 
<<SYNOPSIS>>
[SYNOPSIS](../../fills/raise/SYNOPSIS)


[UP](###UP)
## p_RETURN_ru
:raise:
[next](##p_RETURN)

<<RETURN>>
[RETURN_ru](../../fills/raise/RETURN)


[UP](###UP)
## p_RETURN
:raise:
[next](##p_DESCRIPTION_ru)

----------------------------------------------------- 
-------------------------------------- 
При успешном выполнении функция raise() возвращает 0 или иное значение при ошибке.
-------------------------------------- 
----------------------------------------------------- 
<<RETURN_ru>>
[RETURN](../../fills/raise/RETURN_ru)


[UP](###UP)
## p_DESCRIPTION_ru
:raise:
[next](##p_DESCRIPTION)

----------------------------------------------------- 
-------------------------------------- 
Функция raise() посылает сигнал вызвавшему процессу или нити. В однонитевых программах это эквивалентно
kill(getpid(), sig);
В многонитивых программах это эквивалентно
pthread_kill(pthread_self(), sig);
Если из-за сигнала вызвался обработчик, то raise() вернёт управление только после завершения обработчика сигнала.
-------------------------------------- 
----------------------------------------------------- 
<<DESCRIPTION_ru>>
[DESCRIPTION_ru](../../fills/raise/DESCRIPTION_ru)


[UP](###UP)
## p_DESCRIPTION
:raise:
[next](##p_BUGS)

<<DESCRIPTION>>
[DESCRIPTION](../../fills/raise/DESCRIPTION)


[UP](###UP)
## p_MIRRORS
:raise:
[next](##p_BUGS)

<<MIRRORS>>
[MIRRORS](../../fills/raise/MIRRORS)


[UP](###UP)
## p_BUGS
:raise:
[next](##p_EXAMPLES)

<<BUGS>>
[BUGS](../../fills/raise/BUGS)


[UP](###UP)
## p_EXAMPLES
:raise:
[next](##p_CODE)

----------------------------------------------------- 
-------------------------------------- 
https://www.tutorialspoint.com/c_standard_library/c_function_raise.htm
#include <signal.h>
#include <stdio.h>
void signal_catchfunc(int);
int main () {
int ret;
ret = signal(SIGINT, signal_catchfunc);
if( ret == SIG_ERR) {
printf("Error: unable to set signal handler.
");
exit(0);
}
printf("Going to raise a signal
");
ret = raise(SIGINT);
if( ret !=0 ) {
printf("Error: unable to raise SIGINT signal.
");
exit(0);
}
printf("Exiting...
");
return(0);
}
void signal_catchfunc(int signal) {
printf("!! signal caught !!
");
}
Let us compile and run the above program to will produce the following result −
Going to raise a signal
!! signal caught !!
Exiting...
-------------------------------------- 
----------------------------------------------------- 
<<EXAMPLES>>
[EXAMPLES](../../fills/raise/EXAMPLES)


[UP](###UP)
## p_CODE_h
:raise:
[next](##p_CODE_c)

<<CODE_h>>
[CODE_h](../../fills/raise/CODE_h)


[UP](###UP)
## p_CODE_c
:raise:
[next](##p_CODE_m)

<<CODE_c>>
[CODE_c](../../fills/raise/CODE_c)


[UP](###UP)
## p_CODE_m
:raise:
[next](##p_ERRORS)

<<CODE_m>>
[CODE_m](../../fills/raise/CODE_m)


[UP](###UP)
## p_ERRORS
:raise:
[next](##p_BOOKS)

<<ERRORS>>
[ERRORS](../../fills/raise/ERRORS)


[UP](###UP)
## p_BOOKS
:raise:
[next](##p_BOOKS_ru)

<<BOOKS>>
[BOOKS](../../fills/raise/BOOKS)


[UP](###UP)
## p_BOOKS_ru
:raise:
[next](##p_CONTENT)


<<BOOKS_ru>>
[BOOKS_ru](../../fills/raise/BOOKS_ru)


[UP](###UP)
## p_CONTENT
:raise:
[raise.cnt](../../contents/raise.cnt)
[next](##UP)

[UP](###UP)