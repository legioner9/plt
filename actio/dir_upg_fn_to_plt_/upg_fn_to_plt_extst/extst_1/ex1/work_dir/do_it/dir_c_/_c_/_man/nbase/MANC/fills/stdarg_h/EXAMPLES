https://ru.manpages.org/stdarg/3

Функция foo берёт строку с символами формата и печатает аргумент, связанный с каждым таким символом, на основе его типа.

#include <stdio.h>
#include <stdarg.h>
void
foo(char *fmt, ...)
{
    va_list ap;
    int d;
    char c, *s;
    va_start(ap, fmt);
    while (*fmt)
        switch (*fmt++) {
        case 's':              /* строка */
            s = va_arg(ap, char *);
            printf("строка %s\n", s);
            break;
        case 'd':              /* int */
            d = va_arg(ap, int);
            printf("int %d\n", d);
            break;
        case 'c':              /* символ */
            /* здесь требуется преобразование, так как va_arg только
               с полностью описанными (promoted) типами */
            c = (char) va_arg(ap, int);
            printf("символ %c\n", c);
            break;
        }
    va_end(ap);
}

https://docs.oracle.com/cd/E36784_01/html/E36876/stdarg-3ext.html

Этот пример собирает в массив список аргументов, которые являются указателями на строки (но не более чем аргументы) с помощью функции f1, затем передает массив в качестве одного аргумента функции f2. Количество указателей задается первым аргументом f1.

#include <stdarg.h>
#define MAXARGS	31
void f1(int n_ptrs, ...)
{
     va_list ap;
     char *array[MAXARGS];
     int ptr_no = 0;

     if (n_ptrs > MAXARGS)
          n_ptrs = MAXARGS;
     va_start(ap, n_ptrs);
     while (ptr_no < n_ptrs)
          array[ptr_no++] = va_arg(ap, char*);
     va_end(ap);
     f2(n_ptrs, array);
}

При каждом вызове f1 должно быть видно определение функции или объявление, например

void f1(int, ...)

https://manpages.debian.org/jessie/manpages-dev/stdarg.3.en.html


