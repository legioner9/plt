### UP
[dirname](##dirname)
[MAIN](##MAIN)
[MAIN_ru](##MAIN_ru)
[ANCORS](##ANCORS)
[ISU](##ISU)
[inet](##A_inet)
[inet](##books_inet)
[inet](##examples_inet)
[inet](##classic_inet)
[inet](##enters_inet)
[inet](##issue_code_inet)
[H_FILE](##H_FILE)
[p_SYNOPSIS](##p_SYNOPSIS)
[p_RETURN](##p_RETURN)
[p_RETURN_ru](##p_RETURN_ru)
[p_BUGS](##p_BUGS)
[p_DESCRIPTION_ru](##p_DESCRIPTION_ru)
[p_DESCRIPTION](##p_DESCRIPTION)
[p_MIRRORS](##p_MIRRORS)
[p_EXAMPLES](##p_EXAMPLES)
[p_CODE_h](##p_CODE_h)
[p_CODE_c](##p_CODE_c)
[p_CODE_m](##p_CODE_m)
[p_ERRORS](##p_ERRORS)
[p_BOOKS](##p_BOOKS)
[p_BOOKS_ru](##p_BOOKS_ru)
[p_CONTENT](##p_CONTENT)

[cat_hfiles](../../cat_hfiles.md)
[cat_utils](../../cat_utils.md)
[cat_structs](../../cat_structs.md)
[cat_param](../../cat_params.md)
[cat_macros](../../cat_macross.md)
[cat_const](../../cat_consts.md)
[cat_type](../../cat_types.md)
[cat_any](../cat_anys.md)


[UP](###UP)
## MAIN
:dirname:
[next](##MAIN_ru)

<<MAIN>>
[MAIN](../../fills/dirname/MAIN)



[UP](###UP)
## MAIN_ru
:dirname:
[next](##ANCORS)

<<MAIN_ru>>
[MAIN_ru](../../fills/dirname/MAIN_ru)

[UP](###UP)
## ANCORS
:dirname:
[next](##ISU)

<<ANCORS>>
[ANCORS](../../fills/dirname/ANCORS)

[UP](###UP)
## ISU
:dirname:
[next](##H_FILE)

----------------------------------------------------- 
-------------------------------------- 
file:///home/st/start/communis/Deploy_store/.qa/main_repo_fn/dir_c_/_c_/_man/nbase/_Head_sis_libs_posix/14_libgen_h/1_basename/study_cpjs/dirname_c.isu
-------------------------------------- 
----------------------------------------------------- 
<<ISU>>
only read
:dirname:
[ISU](../../contents)
[next](##inet)


[UP](###UP)
## inet
:dirname:
[next](##H_FILE)


[UP](###UP)
## A_inet
[manpages.org](https://www.google.ru/search?q=dirname+site%3Ahttps%3A%2F%2Fmanpages.org)
[reposcope.com_ru](https://www.google.ru/search?q=dirname+site%3Ahttps%3A%2F%2Freposcope.com%2Fmanpages%2Fru)
[pubs.opengroup.org](https://www.google.com/search?q=dirname+https%3A%2F%2Fpubs.opengroup.org)
[manpages.debian.org](https://yandex.ru/search/?text=dirname+site%3Ahttps%3A%2F%2Fmanpages.debian.org%2F)
[www.opennet.ru](http://www.opennet.ru/man.shtml?category=2&topic=dirname)
[man7.org](https://www.google.ru/search?q=dirname+site%3Ahttps%3A%2F%2Fman7.org%2Flinux%2Fman-pages)
[en.cppreference.com](https://www.google.com/search?q=dirname+en.cppreference.com)
[www.mankier.com](https://www.mankier.com/?q=dirname)
[www.codecogs.com](https://www.google.ru/search?q=dirname+https%3A%2F%2Fwww.codecogs.com%2Flibrary%2Fcomputing%2F)
[digitalmars.com](https://www.google.ru/search?q=dirname+https%3A%2F%2Fdigitalmars.com%2Frtl%2F)


[UP](###UP)
## books_inet
[cpp.com.ru](https://yandex.ru/search/?text=dirname+site%3Ahttps%3A%2F%2Fcpp.com.ru)
[linuxhint.com](https://www.google.ru/search?q=dirname+site%3Ahttps%3A%2F%2Flinuxhint.com)
[gnu.org](https://www.google.ru/search?q=dirname+site%3Ahttps%3A%2F%2Fwww.gnu.org%2Fsoftware%2Flibc%2Fmanual)

[UP](###UP)
## examples_inet
[yandex:examples](https://yandex.ru/search/?text=dirname+example+in+c)
[docs.oracle.com](https://www.google.com/search?q=dirname+https%3A%2F%2Fdocs.oracle.com)
[manpages.debian.org](https://yandex.ru/search/?text=dirname+site%3Ahttps%3A%2F%2Fmanpages.debian.org%2F)
[osr507doc.xinuos.com](https://www.google.com/search?q=dirname+http%3A%2F%2Fosr507doc.xinuos.com%2Fen%2Fman)
[cpp.hotexamples.com](https://cpp.hotexamples.com/examples/-/-/dirname/cpp-dirname-function-examples.html)
[all-ht.ru](https://yandex.ru/search/?text=dirname+site%3Ahttp%3A%2F%2Fall-ht.ru%2Finf%2Fprog%2Fc%2F)
[cppreference.com](https://yandex.ru/search/?text=dirname+site%3Ahttps%3A%2F%2Fen.cppreference.com%2Fw%2Fc%2F)

[UP](###UP)
## classic_inet
[bogatyrev_c_unix](https://www.google.com/search?q=dirname+site%3Ahttps%3A%2F%2Fcpp.com.ru%2Fbogatyrev_c_unix)
[kr_cbook](https://www.google.com/search?q=dirname+site%3Ahttps%3A%2F%2Fcpp.com.ru%2Fkr_cbook)

[UP](###UP)
## enters_inet
[pubs.opengroup.org](https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html)

[UP](###UP)
## issue_code_inet
[code.woboq.org](https://www.google.com/search?h=&sitesearch=https%3A%2F%2Fcode.woboq.org%2Fuserspace%2Fglibc%2F&q=dirname)


[UP](###UP)
## H_FILE 
[libgen_h.md](../../hfiles/libgen_h.md)


[UP](###UP)
## p_SYNOPSIS
:dirname:
[next](##p_RETURN_ru)

<<SYNOPSIS>>
[SYNOPSIS](../../fills/dirname/SYNOPSIS)


[UP](###UP)
## p_RETURN_ru
:dirname:
[next](##p_RETURN)

<<RETURN>>
[RETURN_ru](../../fills/dirname/RETURN)


[UP](###UP)
## p_RETURN
:dirname:
[next](##p_DESCRIPTION_ru)

<<RETURN_ru>>
[RETURN](../../fills/dirname/RETURN_ru)


[UP](###UP)
## p_DESCRIPTION_ru
:dirname:
[next](##p_DESCRIPTION)

<<DESCRIPTION_ru>>
[DESCRIPTION_ru](../../fills/dirname/DESCRIPTION_ru)


[UP](###UP)
## p_DESCRIPTION
:dirname:
[next](##p_BUGS)

<<DESCRIPTION>>
[DESCRIPTION](../../fills/dirname/DESCRIPTION)


[UP](###UP)
## p_MIRRORS
:dirname:
[next](##p_BUGS)

<<MIRRORS>>
[MIRRORS](../../fills/dirname/MIRRORS)


[UP](###UP)
## p_BUGS
:dirname:
[next](##p_EXAMPLES)

<<BUGS>>
[BUGS](../../fills/dirname/BUGS)


[UP](###UP)
## p_EXAMPLES
:dirname:
[next](##p_CODE)

<<EXAMPLES>>
[EXAMPLES](../../fills/dirname/EXAMPLES)


[UP](###UP)
## p_CODE_h
:dirname:
[next](##p_CODE_c)

----------------------------------------------------- 
-------------------------------------- 
https://code.woboq.org/userspace/glibc/misc/dirname.c.html
#include <libgen.h>
#include <string.h>
char *
dirname (char *path)
{
static const char dot[] = ".";
char *last_slash;
/* Find last '/'.  */
last_slash = path != NULL ? strrchr (path, '/') : NULL;
if (last_slash != NULL && last_slash != path && last_slash[1] == '0')
{
/* Determine whether all remaining characters are slashes.  */
char *runp;
for (runp = last_slash; runp != path; --runp)
if (runp[-1] != '/')
break;
/* The '/' is the last character, we have to look further.  */
if (runp != path)
last_slash = __memrchr (path, '/', runp - path);
}
if (last_slash != NULL)
{
/* Determine whether all remaining characters are slashes.  */
char *runp;
for (runp = last_slash; runp != path; --runp)
if (runp[-1] != '/')
break;
/* Terminate the path.  */
if (runp == path)
{
/* The last slash is the first character in the string.  We have to
return "/".  As a special case we have to return "//" if there
are exactly two slashes at the beginning of the string.  See
XBD 4.10 Path Name Resolution for more information.  */
if (last_slash == path + 1)
++last_slash;
else
last_slash = path + 1;
}
else
last_slash = runp;
last_slash[0] = '0';
}
else
/* This assignment is ill-designed but the XPG specs require to
return a string containing "." in any case no directory part is
found and so a static and constant string is required.  */
path = (char *) dot;
return path;
}
-------------------------------------- 
----------------------------------------------------- 
<<CODE_h>>
[CODE_h](../../fills/dirname/CODE_h)


[UP](###UP)
## p_CODE_c
:dirname:
[next](##p_CODE_m)

----------------------------------------------------- 
-------------------------------------- 
https://code.woboq.org/userspace/glibc/stdlib/xpg_basename.c.html
#include <string.h>
#include <libgen.h>
char *
__xpg_basename (char *filename)
{
char *p;
if (filename == NULL || filename[0] == '0')
/* We return a pointer to a static string containing ".".  */
p = (char *) ".";
else
{
p = strrchr (filename, '/');
if (p == NULL)
/* There is no slash in the filename.  Return the whole string.  */
p = filename;
else
{
if (p[1] == '0')
{
/* We must remove trailing '/'.  */
while (p > filename && p[-1] == '/')
--p;
/* Now we can be in two situations:
a) the string only contains '/' characters, so we return
'/'
b) p points past the last component, but we have to remove
the trailing slash.  */
if (p > filename)
{
*p-- = '0';
while (p > filename && p[-1] != '/')
--p;
}
else
/* The last slash we already found is the right position
to return.  */
while (p[1] != '0')
++p;
}
else
/* Go to the first character of the name.  */
++p;
}
}
return p;
}
-------------------------------------- 
----------------------------------------------------- 
<<CODE_c>>
[CODE_c](../../fills/dirname/CODE_c)


[UP](###UP)
## p_CODE_m
:dirname:
[next](##p_ERRORS)

<<CODE_m>>
[CODE_m](../../fills/dirname/CODE_m)


[UP](###UP)
## p_ERRORS
:dirname:
[next](##p_BOOKS)

<<ERRORS>>
[ERRORS](../../fills/dirname/ERRORS)


[UP](###UP)
## p_BOOKS
:dirname:
[next](##p_BOOKS_ru)

<<BOOKS>>
[BOOKS](../../fills/dirname/BOOKS)


[UP](###UP)
## p_BOOKS_ru
:dirname:
[next](##p_CONTENT)


<<BOOKS_ru>>
[BOOKS_ru](../../fills/dirname/BOOKS_ru)


[UP](###UP)
## p_CONTENT
:33333:
[33333.cnt](../../contents/33333.cnt)
[next](##UP)

[UP](###UP)