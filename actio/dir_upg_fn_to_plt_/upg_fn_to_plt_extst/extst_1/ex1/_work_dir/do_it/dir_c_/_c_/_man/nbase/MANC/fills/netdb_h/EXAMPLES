https://manpages.ubuntu.com/manpages/trusty/man3/getprotoent_r.3.html

 Приведенная ниже программа использует getprotobyname_r() для получения записи протокола для протокола
, указанного в его первом аргументе командной строки. Если указан второй (целочисленный) аргумент командной строки
, он используется в качестве начального значения для buflen; если getprotobyname_r() завершается с
ошибкой ERANGE, программа повторяет попытку с буфером большего размера. Следующий сеанс командной
строки показывает несколько примеров выполнения:

$ ./a.out tcp 1
 ОШИБКА! Повторная попытка с большим буфером
getprotobyname_r() вернула: 0 (успех) (buflen=78)
 p_name=tcp; p_proto=6; псевдонимы = TCP
$ ./a.out xxx 1
 ОШИБКА! Повторная попытка с большим буфером
getprotobyname_r() вернула: 0 (успех) (buflen=100)
 Ошибка вызова / запись не найдена


       The program below uses getprotobyname_r() to retrieve the protocol record for the protocol
       named in its first command-line argument.  If a second (integer) command-line argument  is
       supplied, it is used as the initial value for buflen; if getprotobyname_r() fails with the
       error ERANGE, the program retries with larger buffer sizes.  The following  shell  session
       shows a couple of sample runs:

           $ ./a.out tcp 1
           ERANGE! Retrying with larger buffer
           getprotobyname_r() returned: 0 (success)  (buflen=78)
           p_name=tcp; p_proto=6; aliases=TCP
           $ ./a.out xxx 1
           ERANGE! Retrying with larger buffer
           getprotobyname_r() returned: 0 (success)  (buflen=100)
           Call failed/record not found

    source

       #define _GNU_SOURCE
       #include <ctype.h>
       #include <netdb.h>
       #include <stdlib.h>
       #include <stdio.h>
       #include <errno.h>
       #include <string.h>

       #define MAX_BUF 10000

       int
       main(int argc, char *argv[])
       {
           int buflen, erange_cnt, s;
           struct protoent result_buf;
           struct protoent *result;
           char buf[MAX_BUF];
           char **p;

           if (argc < 2) {
               printf("Usage: %s proto-name [buflen]\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           buflen = 1024;
           if (argc > 2)
               buflen = atoi(argv[2]);

           if (buflen > MAX_BUF) {
               printf("Exceeded buffer limit (%d)\n", MAX_BUF);
               exit(EXIT_FAILURE);
           }

           erange_cnt = 0;
           do {
               s = getprotobyname_r(argv[1], &result_buf,
                            buf, buflen, &result);
               if (s == ERANGE) {
                   if (erange_cnt == 0)
                       printf("ERANGE! Retrying with larger buffer\n");
                   erange_cnt++;

                   /* Increment a byte at a time so we can see exactly
                      what size buffer was required */

                   buflen++;

                   if (buflen > MAX_BUF) {
                       printf("Exceeded buffer limit (%d)\n", MAX_BUF);
                       exit(EXIT_FAILURE);
                   }
               }
           } while (s == ERANGE);

           printf("getprotobyname_r() returned: %s  (buflen=%d)\n",
                   (s == 0) ? "0 (success)" : (s == ENOENT) ? "ENOENT" :
                   strerror(s), buflen);

           if (s != 0 || result == NULL) {
               printf("Call failed/record not found\n");
               exit(EXIT_FAILURE);
           }

           printf("p_name=%s; p_proto=%d; aliases=",
                       result_buf.p_name, result_buf.p_proto);
           for (p = result_buf.p_aliases; *p != NULL; p++)
               printf("%s ", *p);
           printf("\n");

           exit(EXIT_SUCCESS);
       }