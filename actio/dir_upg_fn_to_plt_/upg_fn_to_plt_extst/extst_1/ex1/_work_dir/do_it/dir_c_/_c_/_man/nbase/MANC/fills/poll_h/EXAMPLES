https://manpages.debian.org/bullseye/manpages-dev/ppoll.2.en.html

Приведенная ниже программа открывает каждый из файлов, указанных в ее аргументах командной строки, и отслеживает результирующие файловые дескрипторы на предмет готовности к чтению (POLLIN). Программа повторяет цикл, повторно используя poll() для мониторинга файловых дескрипторов, печатая количество готовых файловых дескрипторов при возврате. Для каждого готового файлового дескриптора программа:

отображает возвращенное поле revents в удобочитаемой форме;
если дескриптор файла доступен для чтения, считывает из него некоторые данные и отображает эти данные в стандартном выводе; и
если файловые дескрипторы были недоступны для чтения, но произошло какое-то другое событие (предположительно, ОПРОС), дескриптор файла закрывается.
Предположим, мы запускаем программу в одном терминале, прося ее открыть FIFO:


$ mkfifo myfifo
$ ./poll_input myfifo

Затем во втором окне терминала мы открываем FIFO для записи, записываем в него некоторые данные и закрываем FIFO:


$ echo aaaaabbbbcccccc > myfifo

Затем в терминале, где мы запускаем программу, мы увидим:


Opened "myfifo" on fd 3
About to poll()
Ready: 1


  fd=3; events: POLLIN POLLHUP


    read 10 bytes: aaaaabbbbb
About to poll()
Ready: 1


  fd=3; events: POLLIN POLLHUP


    read 6 bytes: ccccc
About to poll()
Ready: 1


  fd=3; events: POLLHUP


    closing fd 3
All file descriptors closed; bye


В приведенном выше выводе мы видим, что функция poll() возвращается три раза:

При первом возврате биты, возвращенные в поле revents, были POLLIN, что указывает на то, что дескриптор файла доступен для чтения, и POLLHUP, что указывает на то, что другой конец FIFO был закрыт. Затем программа использовала часть доступных входных данных.
Во втором возврате из poll() также указаны POLLIN и POLLHUP; затем программа использовала последний из доступных входных данных.
При окончательном возврате функция poll() указала только POLLHUP в FIFO, после чего дескриптор файла был закрыт, и программа завершилась.

/* poll_input.c


   Licensed under GNU General Public License v2 or later.
*/
#include <poll.h>
#include <fcntl.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \


                        } while (0)
int
main(int argc, char *argv[])
{


    int nfds, num_open_fds;


    struct pollfd *pfds;


    if (argc < 2) {


       fprintf(stderr, "Usage: %s file...\n", argv[0]);


       exit(EXIT_FAILURE);


    }


    num_open_fds = nfds = argc - 1;


    pfds = calloc(nfds, sizeof(struct pollfd));


    if (pfds == NULL)


        errExit("malloc");


    /* Open each file on command line, and add it 'pfds' array */


    for (int j = 0; j < nfds; j++) {


        pfds[j].fd = open(argv[j + 1], O_RDONLY);


        if (pfds[j].fd == -1)


            errExit("open");


        printf("Opened \"%s\" on fd %d\n", argv[j + 1], pfds[j].fd);


        pfds[j].events = POLLIN;


    }


    /* Keep calling poll() as long as at least one file descriptor is


       open */


    while (num_open_fds > 0) {


        int ready;


        printf("About to poll()\n");


        ready = poll(pfds, nfds, -1);


        if (ready == -1)


            errExit("poll");


        printf("Ready: %d\n", ready);


        /* Deal with array returned by poll() */


        for (int j = 0; j < nfds; j++) {


            char buf[10];


            if (pfds[j].revents != 0) {


                printf("  fd=%d; events: %s%s%s\n", pfds[j].fd,


                        (pfds[j].revents & POLLIN)  ? "POLLIN "  : "",


                        (pfds[j].revents & POLLHUP) ? "POLLHUP " : "",


                        (pfds[j].revents & POLLERR) ? "POLLERR " : "");


                if (pfds[j].revents & POLLIN) {


                    ssize_t s = read(pfds[j].fd, buf, sizeof(buf));


                    if (s == -1)


                        errExit("read");


                    printf("    read %zd bytes: %.*s\n",


                            s, (int) s, buf);


                } else {                /* POLLERR | POLLHUP */


                    printf("    closing fd %d\n", pfds[j].fd);


                    if (close(pfds[j].fd) == -1)


                        errExit("close");


                    num_open_fds--;


                }


            }


        }


    }


    printf("All file descriptors closed; bye\n");


    exit(EXIT_SUCCESS);
}