https://linuxhint.com/using_mmap_function_linux/

Функция mmap() используется для сопоставления адресного пространства процесса с файлами или устройствами. Когда файл сопоставляется с адресным пространством процесса, к файлу можно обращаться как к массиву в программе. Это один из наиболее эффективных способов доступа к данным в файле и обеспечивает бесшовный интерфейс кодирования, который является естественным для структуры данных, которую можно оценивать без абстрагирования чтения и записи из файлов. В этой статье мы обсудим, как использовать функцию mmap() в Linux. Итак, давайте начнем.

Header File:
#include <sys/mman.h>
Syntax:

void * mmap (void *address, size_t length, int protect, int flags, int filedes,
off_t offset)

Аргументы:
Функция принимает 6 аргументов:

1. адрес:
Этот аргумент дает предпочтительный начальный адрес для сопоставления. Если другого сопоставления там не существует, ядро выберет ближайшую границу страницы и создаст сопоставление; в противном случае ядро выбирает новый адрес. Если этот аргумент равен NULL, то ядро может разместить отображение в любом месте, где сочтет нужным.

2. длина:
Это количество байтов, которые должны быть сопоставлены.

3. защита:
Этот аргумент используется для управления тем, какой доступ разрешен. Этот аргумент может быть логическим "ИЛИ" из следующих флагов PROT_READ | PROT_WRITE | PROT_EXEC | PROT_NONE. Типы доступа для чтения, записи и выполнения - это разрешения на содержимое.

4. флаги:
Этот аргумент используется для управления характером карты. Ниже приведены некоторые общие значения флагов:

MAP_SHARED: этот флаг используется для совместного использования сопоставления со всеми другими процессами, которые сопоставлены с этим объектом. Изменения, внесенные в область сопоставления, будут записаны обратно в файл.
MAP_PRIVATE: когда используется этот флаг, отображение не будет видно никаким другим процессам, и внесенные изменения не будут записаны в файл.
MAP_ANONYMOUS / MAP_ANON: этот флаг используется для создания анонимного сопоставления. Анонимное сопоставление означает, что сопоставление не связано ни с какими файлами. Это отображение используется в качестве основного примитива для расширения кучи.
MAP_FIXED: когда используется этот флаг, система должна быть вынуждена использовать точный адрес сопоставления, указанный в адресе, если это невозможно, то сопоставление не будет выполнено.
5. файлы:
Это дескриптор файла, который должен быть сопоставлен.

6. смещение:
Это смещение от того места, где началось сопоставление файлов. Проще говоря, сопоставление подключается к (смещение) к (смещение + длина-1) байтам для файла, открытого в дескрипторе filedes.

Возвращаемые значения:
При успешном выполнении mmap() возвращает 0; при сбое функция возвращает MAP_FAILED .

Наглядно мы можем представить функцию map следующим образом:


Для снятия карты используется функция munmap() отображенной области :

Синтаксис:

int munmap(void *address, size_t длина);

Возвращаемые значения:
При успешном выполнении функция munmap() возвращает 0; при сбое функция возвращает -1.

Распределение памяти (Example1.c)
Чтение файла (Example2.c)
Запись файла (Example3.c)
Межпроцессное взаимодействие (Example4.c)


Example1.c
#include <stdio.h>
#include <sys/mman.h>

int main(){

int N=5;
int *ptr = mmap ( NULL, N*sizeof(int),
 PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0, 0 );

if(ptr == MAP_FAILED){
    printf("Mapping Failed\n");
    return 1;
}

for(int i=0; i<N; i++)
    ptr[i] = i*10;

for(int i=0; i<N; i++)
    printf("[%d] ",ptr[i]);

printf("\n");
int err = munmap(ptr, 10*sizeof(int));
if(err != 0){
    printf("UnMapping Failed\n");
    return 1;
}

return 0;
}


В примере 1.c мы выделяем память с помощью mmap. Здесь мы использовали 
защиту PROT_READ | PROT_WRITE для чтения и записи в отображенную область. 
Мы использовали флаг MAP_PRIVATE | MAP_ANONYMOUS. MAP_PRIVATE используется, 
потому что область сопоставления не используется совместно с другими процессами, 
а MAP_ANONYMOUS используется, потому что здесь мы не сопоставили ни одного файла. 
По той же причине для дескриптора файла и значения смещения установлено значение 0.

Example2.c
#include <stdio.h>
#include <sys/mman.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[]){

    if(argc < 2){
        printf("File path not mentioned\n");
        exit(0);
    }
   
    const char *filepath = argv[1];
    int fd = open(, O_RDONLY);
    if(fd < 0){
        printf("\n\"%s \" could not open\n",
               filepath);
        exit(1);
    }

    struct stat statbuf;
    int err = fstat(fd, &statbuf);
    if(err < 0){
        printf("\n\"%s \" could not open\n",
                       filepath);
        exit(2);
    }

    char *ptr = mmap(NULL,statbuf.st_size,
            PROT_READ|PROT_WRITE,MAP_SHARED,
            fd,0);
    if(ptr == MAP_FAILED){
        printf("Mapping Failed\n");
        return 1;
    }
    close(fd);

    ssize_t n = write(1,ptr,statbuf.st_size);
    if(n != statbuf.st_size){
        printf("Write failed");
    }

   

    err = munmap(ptr, statbuf.st_size);

    if(err != 0){
        printf("UnMapping Failed\n");
        return 1;
    }
    return 0;
}


В Example2.c мы сопоставили файл “file1.txt ”. Сначала мы создали файл, 
затем сопоставили файл с процессом. Мы открываем файл в режиме O_RDONLY, 
потому что здесь мы хотим только прочитать файл.

Example3.c
#include <stdio.h>
#include <sys/mman.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[]){

    if(argc < 2){
        printf("File path not mentioned\n");
        exit(0);
    }
   
    const char *filepath = argv[1];
    int fd = open(, O_RDWR);
    if(fd < 0){
        printf("\n\"%s \" could not open\n",
               filepath);
        exit(1);
    }

    struct stat statbuf;
    int err = fstat(fd, &statbuf);
    if(err < 0){
        printf("\n\"%s \" could not open\n",
                       filepath);
        exit(2);
    }

    char *ptr = mmap(NULL,statbuf.st_size,
            PROT_READ|PROT_WRITE,
                        MAP_SHARED,
            fd,0);
    if(ptr == MAP_FAILED){
        printf("Mapping Failed\n");
        return 1;
    }
    close(fd);

    ssize_t n = write(1,ptr,statbuf.st_size);
    if(n != statbuf.st_size){
        printf("Write failed\n");
    }


    // Reverse the file contents
    for(size_t i=0; i \n);
    n = write(1,ptr,statbuf.st_size);
    if(n != statbuf.st_size){
        printf("Write failed\n");
    }

    err = munmap(ptr, statbuf.st_size);

    if(err != 0){
        printf("UnMapping Failed\n");
        return 1;
    }
    return 0;
}


В Example3.c мы прочитали, а затем записали в файл.

Example4.c
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/mman.h>

int main(){

    int N=5; // Number of elements for the array
   
    int *ptr = mmap(NULL,N*sizeof(int),
     PROT_READ | PROT_WRITE,
     MAP_SHARED | MAP_ANONYMOUS,
     0,0);    

    if(ptr == MAP_FAILED){
     printf("Mapping Failed\n");
     return 1;
    }

    for(int i=0; i < N; i++){
     ptr[i] = i + 1;
    }

    printf("Initial values of the array elements :\n");
    for (int i = 0; i < N; i++ ){
     printf(" %d", ptr[i] );
    }
    printf("\n");

    pid_t child_pid = fork();
   
    if ( child_pid == 0 ){
     //child
     for (int i = 0; i < N; i++){
         ptr[i] = ptr[i] * 10;
     }
    }
    else{
     //parent
     waitpid ( child_pid, NULL, 0);
     printf("\nParent:\n");

     printf("Updated values of the array elements :\n");
     for (int i = 0; i < N; i++ ){
         printf(" %d", ptr[i] );
     }
     printf("\n");
    }

    int err = munmap(ptr, N*sizeof(int));

    if(err != 0){
     printf("UnMapping Failed\n");
     return 1;
    }
    return 0;
}


В Example4.c сначала массив инициализируется некоторыми значениями, затем 
дочерний процесс обновляет значения. Родительский процесс считывает значения, 
обновленные дочерним процессом, поскольку отображенная память является общей для обоих процессов.

Заключение:
Mmap() - это мощный системный вызов. Эту функцию не следует использовать 
при проблемах с переносимостью, поскольку эта функция поддерживается только средой Linux.
