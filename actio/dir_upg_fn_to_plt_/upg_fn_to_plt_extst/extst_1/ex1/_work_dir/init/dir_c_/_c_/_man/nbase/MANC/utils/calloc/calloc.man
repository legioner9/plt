### UP
[calloc](##calloc)
[MAIN](##MAIN)
[MAIN_ru](##MAIN_ru)
[ANCORS](##ANCORS)
[ISU](##ISU)
[inet](##A_inet)
[inet](##books_inet)
[inet](##examples_inet)
[inet](##classic_inet)
[inet](##enters_inet)
[inet](##issue_code_inet)
[H_FILE](##H_FILE)
[p_SYNOPSIS](##p_SYNOPSIS)
[p_RETURN](##p_RETURN)
[p_RETURN_ru](##p_RETURN_ru)
[p_BUGS](##p_BUGS)
[p_DESCRIPTION_ru](##p_DESCRIPTION_ru)
[p_DESCRIPTION](##p_DESCRIPTION)
[p_MIRRORS](##p_MIRRORS)
[p_EXAMPLES](##p_EXAMPLES)
[p_CODE_h](##p_CODE_h)
[p_CODE_c](##p_CODE_c)
[p_CODE_m](##p_CODE_m)
[p_ERRORS](##p_ERRORS)
[p_BOOKS](##p_BOOKS)
[p_BOOKS_ru](##p_BOOKS_ru)
[p_CONTENT](##p_CONTENT)

[cat_hfiles](../../cat_hfiles.md)
[cat_utils](../../cat_utils.md)
[cat_structs](../../cat_structs.md)
[cat_param](../../cat_params.md)
[cat_macros](../../cat_macross.md)
[cat_const](../../cat_consts.md)
[cat_type](../../cat_types.md)
[cat_any](../cat_anys.md)


[UP](###UP)
## MAIN
:calloc:
[next](##MAIN_ru)

<<MAIN>>
[MAIN](../../fills/calloc/MAIN)



[UP](###UP)
## MAIN_ru
:calloc:
[next](##ANCORS)

<<MAIN_ru>>
[MAIN_ru](../../fills/calloc/MAIN_ru)

[UP](###UP)
## ANCORS
:calloc:
[next](##ISU)

<<ANCORS>>
[ANCORS](../../fills/calloc/ANCORS)

[UP](###UP)
## ISU
:calloc:
[next](##H_FILE)

<<ISU>>
only read
:calloc:
[ISU](../../contents)
[next](##inet)


[UP](###UP)
## inet
:calloc:
[next](##H_FILE)


[UP](###UP)
## A_inet
[manpages.org](https://www.google.ru/search?q=calloc+site%3Ahttps%3A%2F%2Fmanpages.org)
[reposcope.com_ru](https://www.google.ru/search?q=calloc+site%3Ahttps%3A%2F%2Freposcope.com%2Fmanpages%2Fru)
[pubs.opengroup.org](https://www.google.com/search?q=calloc+https%3A%2F%2Fpubs.opengroup.org)
[manpages.debian.org](https://yandex.ru/search/?text=calloc+site%3Ahttps%3A%2F%2Fmanpages.debian.org%2F)
[www.opennet.ru](http://www.opennet.ru/man.shtml?category=2&topic=calloc)
[man7.org](https://www.google.ru/search?q=calloc+site%3Ahttps%3A%2F%2Fman7.org%2Flinux%2Fman-pages)
[en.cppreference.com](https://www.google.com/search?q=calloc+en.cppreference.com)
[www.mankier.com](https://www.mankier.com/?q=calloc)
[www.codecogs.com](https://www.google.ru/search?q=calloc+https%3A%2F%2Fwww.codecogs.com%2Flibrary%2Fcomputing%2F)
[digitalmars.com](https://www.google.ru/search?q=calloc+https%3A%2F%2Fdigitalmars.com%2Frtl%2F)


[UP](###UP)
## books_inet
[cpp.com.ru](https://yandex.ru/search/?text=calloc+site%3Ahttps%3A%2F%2Fcpp.com.ru)
[linuxhint.com](https://www.google.ru/search?q=calloc+site%3Ahttps%3A%2F%2Flinuxhint.com)
[gnu.org](https://www.google.ru/search?q=calloc+site%3Ahttps%3A%2F%2Fwww.gnu.org%2Fsoftware%2Flibc%2Fmanual)

[UP](###UP)
## examples_inet
[yandex:examples](https://yandex.ru/search/?text=calloc+example+in+c)
[docs.oracle.com](https://www.google.com/search?q=calloc+https%3A%2F%2Fdocs.oracle.com)
[manpages.debian.org](https://yandex.ru/search/?text=calloc+site%3Ahttps%3A%2F%2Fmanpages.debian.org%2F)
[osr507doc.xinuos.com](https://www.google.com/search?q=calloc+http%3A%2F%2Fosr507doc.xinuos.com%2Fen%2Fman)
[cpp.hotexamples.com](https://cpp.hotexamples.com/examples/-/-/calloc/cpp-calloc-function-examples.html)
[all-ht.ru](https://yandex.ru/search/?text=calloc+site%3Ahttp%3A%2F%2Fall-ht.ru%2Finf%2Fprog%2Fc%2F)
[cppreference.com](https://yandex.ru/search/?text=calloc+site%3Ahttps%3A%2F%2Fen.cppreference.com%2Fw%2Fc%2F)

[UP](###UP)
## classic_inet
[bogatyrev_c_unix](https://www.google.com/search?q=calloc+site%3Ahttps%3A%2F%2Fcpp.com.ru%2Fbogatyrev_c_unix)
[kr_cbook](https://www.google.com/search?q=calloc+site%3Ahttps%3A%2F%2Fcpp.com.ru%2Fkr_cbook)

[UP](###UP)
## enters_inet
[pubs.opengroup.org](https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html)

[UP](###UP)
## issue_code_inet
[code.woboq.org](https://www.google.com/search?h=&sitesearch=https%3A%2F%2Fcode.woboq.org%2Fuserspace%2Fglibc%2F&q=calloc)


[UP](###UP)
## H_FILE 
[stdlib_h.md](../../hfiles/stdlib_h.md)


[UP](###UP)
## p_SYNOPSIS
:calloc:
[next](##p_RETURN_ru)

----------------------------------------------------- 
-------------------------------------- 
https://manpages.org/calloc/3
#include <stdlib.h>
void *malloc(size_t size);
void free(void *ptr);
void *calloc(size_t nmemb, size_t size);
void *realloc(void *ptr, size_t size);
-------------------------------------- 
----------------------------------------------------- 
<<SYNOPSIS>>
[SYNOPSIS](../../fills/calloc/SYNOPSIS)


[UP](###UP)
## p_RETURN_ru
:calloc:
[next](##p_RETURN)

<<RETURN>>
[RETURN_ru](../../fills/calloc/RETURN)


[UP](###UP)
## p_RETURN
:calloc:
[next](##p_DESCRIPTION_ru)

----------------------------------------------------- 
-------------------------------------- 
Функции malloc() и calloc() возвращают указатель на выделенную память, которая соответствующим образом выровнена для любого встроенного типа. При ошибке эти функции возвращают значение NULL. NULL также может быть возвращен успешным вызовом malloc() с нулевым размером или успешным вызовом calloc() с nmemb или размером, равным нулю.
Функция free() не возвращает значения.
Функция realloc() возвращает указатель на вновь выделенную память, который соответствующим образом выровнен для любого встроенного типа и может отличаться от ptr или NULL в случае сбоя запроса. Если size был равен 0, возвращается либо NULL, либо указатель, подходящий для передачи в free() . Если realloc() завершается с ошибкой, исходный блок остается нетронутым; он не освобождается и не перемещается.
-------------------------------------- 
----------------------------------------------------- 
<<RETURN_ru>>
[RETURN](../../fills/calloc/RETURN_ru)


[UP](###UP)
## p_DESCRIPTION_ru
:calloc:
[next](##p_DESCRIPTION)

----------------------------------------------------- 
-------------------------------------- 
Функция malloc() выделяет байты размера и возвращает указатель на выделенную память. Память не инициализирована. Если size равен 0, то malloc() возвращает либо NULL, либо уникальное значение указателя, которое позже может быть успешно передано free() .
Функция free() освобождает пространство памяти, на которое указывает ptr, которое должно было быть возвращено предыдущим вызовом malloc() , calloc() или realloc() . В противном случае, или если free(ptr) уже был вызван ранее, возникает неопределенное поведение. Если ptr равно НУЛЮ, операция не выполняется.
Функция calloc() выделяет память для массива элементов nmemb размером байт каждый и возвращает указатель на выделенную память. Память установлена на ноль. Если nmemb или size равно 0, то calloc() возвращает либо NULL, либо уникальное значение указателя, которое позже может быть успешно передано free() .
Функция realloc() изменяет размер блока памяти, на который указывает ptr, на размер байт. Содержимое останется неизменным в диапазоне от начала области до минимального из старых и новых размеров. Если новый размер больше старого, добавленная память не будет инициализирована. Если ptr равно НУЛЮ, то вызов эквивалентен malloc(size) для всех значений size; если size равен нулю, а ptr не равен НУЛЮ, то вызов эквивалентен free(ptr). Если ptr не равен НУЛЮ, он должен быть возвращен более ранним вызовом malloc() , calloc() или realloc() . Если указанная область была перемещена, выполняется освобождение (ptr).
-------------------------------------- 
----------------------------------------------------- 
<<DESCRIPTION_ru>>
[DESCRIPTION_ru](../../fills/calloc/DESCRIPTION_ru)


[UP](###UP)
## p_DESCRIPTION
:calloc:
[next](##p_BUGS)

<<DESCRIPTION>>
[DESCRIPTION](../../fills/calloc/DESCRIPTION)


[UP](###UP)
## p_MIRRORS
:calloc:
[next](##p_BUGS)

<<MIRRORS>>
[MIRRORS](../../fills/calloc/MIRRORS)


[UP](###UP)
## p_BUGS
:calloc:
[next](##p_EXAMPLES)

<<BUGS>>
[BUGS](../../fills/calloc/BUGS)


[UP](###UP)
## p_EXAMPLES
:calloc:
[next](##p_CODE)

<<EXAMPLES>>
[EXAMPLES](../../fills/calloc/EXAMPLES)


[UP](###UP)
## p_CODE_h
:calloc:
[next](##p_CODE_c)

<<CODE_h>>
[CODE_h](../../fills/calloc/CODE_h)


[UP](###UP)
## p_CODE_c
:calloc:
[next](##p_CODE_m)

<<CODE_c>>
[CODE_c](../../fills/calloc/CODE_c)


[UP](###UP)
## p_CODE_m
:calloc:
[next](##p_ERRORS)

<<CODE_m>>
[CODE_m](../../fills/calloc/CODE_m)


[UP](###UP)
## p_ERRORS
:calloc:
[next](##p_BOOKS)

<<ERRORS>>
[ERRORS](../../fills/calloc/ERRORS)


[UP](###UP)
## p_BOOKS
:calloc:
[next](##p_BOOKS_ru)

<<BOOKS>>
[BOOKS](../../fills/calloc/BOOKS)


[UP](###UP)
## p_BOOKS_ru
:calloc:
[next](##p_CONTENT)


<<BOOKS_ru>>
[BOOKS_ru](../../fills/calloc/BOOKS_ru)


[UP](###UP)
## p_CONTENT
:33333:
[33333.cnt](../../contents/33333.cnt)
[next](##UP)

[UP](###UP)