## RCM_PLT_EXIT:
    {echo [str] >&2} -> {plt_exit [str]}

## RCM_NOTCH_DOCR
not change ground function <name><n>_:
    - create new in plt with <name><n+1>_
    - mark <name><n>_ as deprecated 

## RCM_ISH
mayst use .ish - inner exec files in .sh

## RCM_UPG_PATH
allways upg_path_ after create file

## RCM_TST_BASH
test bash (as file!) utils, use try not use return value and current std - only exist std (as diff)

## RCM_DOT_DD
discribe dir content 

    .dd
    ├── causa.man - wtwy - what why that exsist?
    └── sruct.man

## RCM_FNAA 
for exec function use pointer_not_idetifier, define pointer in .frc (as .d/.frc/a.frc)

## RCM_DOTAX
- ext .ax 
  - in dir (freez rename or move exists files) name meam fs defend for move files but ther may be changed and add new files
  - in file name mean that any canged will be eliminated after next autocreate or rebuilding

## RCM_NID_EXL
- how work functions: exec exl file set (interor logics) in nidus (exterior api) 

## RCM_CIR
- any project mast .cir point to inject variables
- only const in .cir - hardcode is bad 

## RCM_DOTNSC
-  ext .nsc do not change that nod

## RCM_CON
- use coname <func_name><co> as 
  - _plt without use .nid for productin
  - _cntl for edit code in <func_name>

## RCM_AID
- any is directory (acro: all is file)
  - use loop out: tread files 1_..., 2_... , step by step

## RCM_PIN
- path is name -  semanicaly - exa: <name>.<ext> <-> .ext/name/

## RCM_MIDNUM
- naming contane name
  - ...2... to 
    - d2... file in dir pipe to ...
    - f2... sting in file pipe to ...
  - ...3... treat without ^# string or ^_ path
  - ...4... treat dowble lst 
  - ...5... treat dowble lst without ^# string or ^_ path
