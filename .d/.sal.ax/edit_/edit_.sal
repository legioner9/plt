#!/bin/bash

#! amount args
# ${_is_amount_arg} ${NARGS} min_equ max_equ
# if [ $? -ne 0 ]; then
#     plt_pause "from ${FNN}() :: ${_is_amount_arg} ${NARGS} min_equ:: be return 1"
#     return 1
# fi
#! normalize ptr_path -> absolut path
# ptr_path=$1
# ptr_path=$(${_abs_path} $PPWD "ptr_path") #ptr args
#! variables for cr_f_dir_insert_
# fn_name=$(${_prs_f} -n ${arg_path})
# root_path=$(${_prs_f} -d ${arg_path})
#! search in array
# [[ " ${arr[*]} " =~ " $1 " ]] && echo "true" || echo "false"
#! ${array[@]:1} all from 1 member arr

# echo -e "${GREEN}\${g_args[@]} = ${g_args[*]}${NORMAL}" #print variable
# echo -e "${GREEN}\${e_args[@]} = ${e_args[*]}${NORMAL}" #print variable
# echo -e "${GREEN}\${f_args[@]} = ${f_args[*]}${NORMAL}" #print variable
# echo -e "${GREEN}\${ARGS[@]} = ${ARGS[*]}${NORMAL}"     #print variable
# echo -e "${GREEN}\${NARGS} = ${NARGS}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS0} = ${ARGS0}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS1} = ${ARGS1}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS2} = ${ARGS2}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS3} = ${ARGS3}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS4} = ${ARGS4}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS5} = ${ARGS5}${NORMAL}"         #print variable
# echo -e "${GREEN}\${PPWD} = ${PPWD}${NORMAL}"           #print variable

# echo -e "${GREEN}\${dir_fns_} = ${dir_fns_}${NORMAL}" #print variable

# echo -e "${GREEN}\${var_wrap_arr[@]} = ${var_wrap_arr[*]}${NORMAL}" #print variable
# echo -e "${GREEN}\${var_fn_arr[@]} = ${var_fn_arr[*]}${NORMAL}"     #print variable

# echo -e "${GREEN}\${arg_fn_arr[@]} = ${arg_fn_arr[*]}${NORMAL}"
# echo -e "${GREEN}\${env_fn_arr[@]} = ${env_fn_arr[*]}${NORMAL}"
# echo -e "${GREEN}\${pts_fn_arr[@]} = ${pts_fn_arr[*]}${NORMAL}"

# echo -e "${GREEN}\$val_ppr = $val_ppr${NORMAL}" #print variable

# echo -e "${GREEN}\$ratis = $ratis${NORMAL}" #print variable

# echo "that ${FNN}.sal"

#! every from list_strong_cntls by able
# list_strong_cntls=(?str_ ?del_ ?parr_)
# for item in "${list_strong_cntls[@]}"; do
#     echo -e "${GREEN}\$item = $item${NORMAL}" #print variable
#     echo "$(eval echo \$"$item")"
#     if [ -z "$(eval echo \$"$item")" ]; then
#         plt_info "from ${FNN}() :: $item is empty :: be return 1"
#         return 1
#     fi
# done

#! once dpl_ or bcp_ mast be able (0 1)
# sum_1=$((${dpl_:-0} + ${bcp_:-0}))
# echo -e "${GREEN}\$sum_1 = $sum_1${NORMAL}"

# if [ "${sum_1:-0}" -ne 1 ]; then
#     plt_info "from ${FNN}() once dpl_ or bcp_ mast be able :: be return 1"
#     return 1
# fi

#! see ${PATH_CURR_REPO}/NBash/_man/ptr/flow_1.sh
#? in nid allready be reseiving value from ppr_
#   eval val_ppr=\$"${ppr_}" # reseiving value from ppr_
#? use and assign new value to ppr_
#   eval ${ppr_}=$(any_fn ${val_ppr}) # use old value of ppr_ and assign new value to ppr_

#! in pts_fn_arr contane external idetificators (pointers)
# num=
# echo num>pts.list
# any_fn(){num=10}
# any_fn --_pts pts.list
# any_fn
# echo ${num}
# 10

#! cr fs cr_f_
# cr_f_ \
#     "$filename" \
#     --tml "${PATH_TML_DIR}/cr_shf_/shf.tml" \
#     --fi0 "${header}" --fr0 "{header}" \
#     --vi0 "$filename" --vr0 "{filename}"

#! cr fs standart
# "${_obs_quis_}" "$filename"
# "${_upg_path}" "$filename"

#! cr fs cr_f_dir_insert_
# ${_cr_f_dir_insert_} --name ${filename} --dir_insert ${PATH_INSERT_DIR}/obs_quis_

#! innerfns
# if [ -d "${sil_}/proc/fol_" ]; then

#     c_up "${sil_}/proc/fol_"

#     inner_fn_arr=()
#     dr2parr_ inner_fn_arr 3 "${sil_}/proc/fol_"

# else
#     plt_exit "in ${FNN} : NOT_DIR : '${sil_}/proc/fol_' return 1"
#     return 1
# fi

# for item6 in ${inner_fn_arr[@]}; do
#     echo -e "${GREEN}\$item6 = $item6${NORMAL}" #print variable

#     ${item6}

#     ret_nom=$?
#     if [ ${ret_nom} -eq 2 ]; then
#         return 0
#     fi
#     if [ ${ret_nom} -eq 3 ]; then
#         return 1
#     fi
#     echo -e "${GREEN}\$ret_nom = $ret_nom${NORMAL}" #print variable

# done

#?--------------------------------------------------------
#?---------------------------------------------
#?---------------------------------------

# if [ "$PLT_COGOS" == "fedora" ]; then
#     if test_c "code"; then
#         echo -e "${BLUE}---code -"$2" "$THIS_ARG1"---${NORMAL}" #sistem info mesage
#         # code -g "$THIS_ARG1":"$2" : 0
#         code $2 "$THIS_ARG1"

#     elif test_c "gvim"; then
#         echo -e "${ULINE}gvim -v +"$2" "$THIS_ARG1"${NORMAL}" #repit commands
#         gvim -v +"$2" "$THIS_ARG1"

#     elif test_c "vim"; then
#         vim "$THIS_ARG1"
#     else
#         qq_exit "win editor not enabled"
#     fi

# fi
if [ -n "$1" ]; then
    echo -e "${ULINE}THIS_ARG1=$1${NORMAL}" #repit commands
    THIS_ARG1="$1"
else
    echo -e "${ULINE}THIS_ARG1=$PPWD${NORMAL}" #repit commands
    THIS_ARG1="$PPWD"
fi

ptr_path=$1
ptr_path=$(${_abs_path} $PPWD "ptr_path") #ptr args

# if type "codium"; then
#     echo -e "${ULINE} codium $ptr_path${NORMAL}" #repit commands
#     codium $2 "$ptr_path"0

# elif type "code"; then
#     echo -e "${ULINE} code $ptr_path${NORMAL}" #repit commands
#     code $2 "$ptr_path"

# elif type "nnn"; then
#     echo -e "${ULINE} code $ptr_path${NORMAL}" #repit commands
#     nnn $2 "$ptr_path"

# elif type "mc"; then
#     echo -e "${ULINE} code $ptr_path${NORMAL}" #repit commands
#     mc $2 "$ptr_path"

if type "code"; then
    echo -e "${ULINE} code $ptr_path${NORMAL}" #repit commands
    code $2 "$ptr_path"

elif type "codium"; then
    echo -e "${ULINE} codium $ptr_path${NORMAL}" #repit commands
    codium $2 "$ptr_path"

elif type "gvim"; then
    echo -e "${ULINE}gvim -v +$2 $ptr_path${NORMAL}" #repit commands
    gvim -v +"$2" "$ptr_path"

elif type "vim"; then
    vim "$ptr_path"
else
    plt_errr "editors: codium, gvim, vim not enabled"
fi

#{main_body_fn}

#?---------------------------------------
#?---------------------------------------------
#?--------------------------------------------------------
