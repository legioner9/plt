#>var
#? "#>" head "d" tail to ine_tail
# start /communis/Deploy_store/.qa/.var/is_est_/key_equal_fn.var

#>d
eval d="[ \${d_is_est_} -eq 1 ] && ! [ -d "\$arg_path" ]"
eval d_message="\\\$arg_path: \$arg_path :: not dir"

#>f
eval f="[ \${f_is_est_} -eq 1 ] && ! [ -f "\$arg_path" ]"
eval f_message="\\\$arg_path: \$arg_path :: not simple file"

#>e
eval e="[ \${e_is_est_} -eq 1 ] && ! [ -e "\$arg_path" ]"
eval e_message="\\\$arg_path: \$arg_path :: not exist"

#>s
eval s="[ \${s_is_est_} -eq 1 ] && ! [ -s "\$arg_path" ]"
eval s_message="\\\$arg_path: \$arg_path :: zero file size"

#>b
eval b="[ \${b_is_est_} -eq 1 ] && ! [ -b "\$arg_path" ]"
eval b_message="\\\$arg_path: \$arg_path :: file is not block devise(floppy, sdrom...)"

#>c
eval c="[ \${c_is_est_} -eq 1 ] && ! [ -c "\$arg_path" ]"
eval c_message="\\\$arg_path: \$arg_path :: file is not character devise(modem, keyboard, sound card ...)"

#>p
eval p="[ \${p_is_est_} -eq 1 ] && ! [ -p "\$arg_path" ]"
eval p_message="\\\$arg_path: \$arg_path :: file is not pipe"

#>L
eval L="[ \${L_is_est_} -eq 1 ] && ! [ -L "\$arg_path" ]"
eval L_message="\\\$arg_path: \$arg_path :: file is not symbolic link"

#>h
eval h="[ \${h_is_est_} -eq 1 ] && ! [ -h "\$arg_path" ]"
eval h_message="\\\$arg_path: \$arg_path :: file is not symbolic link"

#>S
eval S="[ \${S_is_est_} -eq 1 ] && ! [ -S "\$arg_path" ]"
eval S_message="\\\$arg_path: \$arg_path :: file is not socket"

#>t
eval t="[ \${t_is_est_} -eq 1 ] && ! [ -t "\$arg_path" ]"
eval t_message="\\\$arg_path: \$arg_path :: file is not bind with terminal"

#>r
eval r="[ \${r_is_est_} -eq 1 ] && ! [ -r "\$arg_path" ]"
eval r_message="\\\$arg_path: \$arg_path :: file is not readable in this process"

#>w
eval w="[ \${w_is_est_} -eq 1 ] && ! [ -w "\$arg_path" ]"
eval w_message="\\\$arg_path: \$arg_path :: file is not avalable for recording in this process"

#>x
eval x="[ \${x_is_est_} -eq 1 ] && ! [ -x "\$arg_path" ]"
eval x_message="\\\$arg_path: \$arg_path :: file is not avalable for execution in this process"

#>g
eval g="[ \${g_is_est_} -eq 1 ] && ! [ -g "\$arg_path" ]"
eval g_message="\\\$arg_path: \$arg_path :: sgid flag for file or directory is not set"

#>u
eval u="[ \${u_is_est_} -eq 1 ] && ! [ -u "\$arg_path" ]"
eval u_message="\\\$arg_path: \$arg_path :: suid flag for file is not set"

#>k
eval k="[ \${k_is_est_} -eq 1 ] && ! [ -k "\$arg_path" ]"
eval k_message="\\\$arg_path: \$arg_path :: flag sticky bit not set"

#>O
eval O="[ \${O_is_est_} -eq 1 ] && ! [ -O "\$arg_path" ]"
eval O_message="\\\$arg_path: \$arg_path :: you are not owner of the file"

#>G
eval G="[ \${G_is_est_} -eq 1 ] && ! [ -G "\$arg_path" ]"
eval G_message="\\\$arg_path: \$arg_path :: you do not belong to some group as the file"

#>N
eval N="[ \${N_is_est_} -eq 1 ] && ! [ -N "\$arg_path" ]"
eval N_message="\\\$arg_path: \$arg_path :: the file has not been modified since the last read"

# string

#>sz
eval z="[ \${z_is_est_} -eq 1 ] && ! [ -z "\$str" ]"
eval z_message="\\\$arg_path: \$arg_path :: lenghth of string is not equal 0"

#>sn
eval n="[ \${n_is_est_} -eq 1 ] && ! [ -n "\$str" ]"
eval n_message="\\\$arg_path: \$arg_path :: lenghth of string is equal 0"

#>seq

eval seq="[ \${seq_is_est_} -eq 1 ] && ! [ "\$str_1" == "\$str_2" ]"
eval seq_message="lenghth of string is equal 0"

# number

# end 