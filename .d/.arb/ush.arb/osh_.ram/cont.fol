#!/bin/bash

#! amount args
# ${_is_amount_arg} ${NARGS} min_equ max_equ
# if [ $? -ne 0 ]; then
#     plt_pause "from ${FNN}() :: ${_is_amount_arg} ${NARGS} min_equ:: be return 1"
#     return 1
# fi
#! normalize ptr_path -> absolut path
# ptr_path=$1
# ptr_path=$(${_abs_path} $PPWD "ptr_path") #ptr args
#! variables for cr_f_dir_insert_
# fn_name=$(${_prs_f} -n ${arg_path})
# root_path=$(${_prs_f} -d ${arg_path})
#! search in array
# [[ " ${arr[*]} " =~ " $1 " ]] && echo "true" || echo "false"
#! ${array[@]:1} all from 1 member arr

# echo -e "${GREEN}\${g_args[@]} = ${g_args[*]}${NORMAL}" #print variable
# echo -e "${GREEN}\${e_args[@]} = ${e_args[*]}${NORMAL}" #print variable
# echo -e "${GREEN}\${f_args[@]} = ${f_args[*]}${NORMAL}" #print variable
# echo -e "${GREEN}\${ARGS[@]} = ${ARGS[*]}${NORMAL}"     #print variable
# echo -e "${GREEN}\${NARGS} = ${NARGS}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS0} = ${ARGS0}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS1} = ${ARGS1}${NORMAL}"         #print variable
# echo -e "${GREEN}\${ARGS2} = ${ARGS2}${NORMAL}"         #print variable
# echo -e "${GREEN}\${PPWD} = ${PPWD}${NORMAL}"           #print variable

# echo -e "${GREEN}\${dir_fns_} = ${dir_fns_}${NORMAL}" #print variable

# echo -e "${GREEN}\${var_wrap_arr[@]} = ${var_wrap_arr[*]}${NORMAL}" #print variable
# echo -e "${GREEN}\${var_fn_arr[@]} = ${var_fn_arr[*]}${NORMAL}"     #print variable

# echo -e "${GREEN}\${arg_fn_arr[@]} = ${arg_fn_arr[*]}${NORMAL}"
# echo -e "${GREEN}\${env_fn_arr[@]} = ${env_fn_arr[*]}${NORMAL}"
# echo -e "${GREEN}\${pts_fn_arr[@]} = ${pts_fn_arr[*]}${NORMAL}"

# echo -e "${GREEN}\$val_ppr = $val_ppr${NORMAL}" #print variable

# echo -e "${GREEN}\$ratis = $ratis${NORMAL}" #print variable

# echo "that ${FNN}.sal"

#! every from list_strong_cntls by able
# list_strong_cntls=(?str_ ?del_ ?parr_)
# for item in "${list_strong_cntls[@]}"; do
#     echo -e "${GREEN}\$item = $item${NORMAL}" #print variable
#     echo "$(eval echo \$"$item")"
#     if [ -z "$(eval echo \$"$item")" ]; then
#         plt_info "from ${FNN}() :: $item is empty :: be return 1"
#         return 1
#     fi
# done

#! once dpl_ or bcp_ mast be able (0 1)
# sum_1=$((${dpl_:-0} + ${bcp_:-0}))
# echo -e "${GREEN}\$sum_1 = $sum_1${NORMAL}"

# if [ "${sum_1:-0}" -ne 1 ]; then
#     plt_info "from ${FNN}() once dpl_ or bcp_ mast be able :: be return 1"
#     return 1
# fi

#! see ${PATH_CURR_REPO}/NBash/_man/ptr/flow_1.sh
#? in nid allready be reseiving value from ppr_
#   eval val_ppr=\$"${ppr_}" # reseiving value from ppr_
#? use and assign new value to ppr_
#   eval ${ppr_}=$(any_fn ${val_ppr}) # use old value of ppr_ and assign new value to ppr_

#! in pts_fn_arr contane external idetificators (pointers)
# num=
# echo num>pts.list
# any_fn(){num=10}
# any_fn --_pts pts.list
# any_fn
# echo ${num}
# 10

#! cr fs cr_f_
# cr_f_ \
#     "$filename" \
#     --tml "${PATH_TML_DIR}/cr_shf_/shf.tml" \
#     --fi0 "${header}" --fr0 "{header}" \
#     --vi0 "$filename" --vr0 "{filename}"

#! cr fs standart
# "${_obs_quis_}" "$filename"
# "${_upg_path}" "$filename"

#! cr fs cr_f_dir_insert_
# ${_cr_f_dir_insert_} --name ${filename} --dir_insert ${PATH_INSERT_DIR}/obs_quis_

#! innerfns
# if [ -d "${sil_}/proc/fol_" ]; then

#     c_up "${sil_}/proc/fol_"

#     inner_fn_arr=()
#     dr2parr_ inner_fn_arr 3 "${sil_}/proc/fol_"

# else
#     plt_exit "in ${FNN} : NOT_DIR : '${sil_}/proc/fol_' return 1"
#     return 1
# fi

# for item6 in ${inner_fn_arr[@]}; do
#     echo -e "${GREEN}\$item6 = $item6${NORMAL}" #print variable

#     ${item6}

#     ret_nom=$?
#     if [ ${ret_nom} -eq 2 ]; then
#         return 0
#     fi
#     if [ ${ret_nom} -eq 3 ]; then
#         return 1
#     fi
#     echo -e "${GREEN}\$ret_nom = $ret_nom${NORMAL}" #print variable

# done

#?--------------------------------------------------------
#?---------------------------------------------
#?---------------------------------------

echo -e "${GREEN}\$FN_FN_DIR = file://$FN_FN_DIR${NORMAL}" #print variable

c_up "${FN_FN_DIR}" >/dev/null

#! 001_grep_name__d_ax__osh___fn_dir_osh_
#! 002_grep_tag__d_ax__osh___fn_dir_osh_
#! 003_E__d_ax__osh___fn_dir_osh_
#! 004_exec_fn__d_ax__osh___fn_dir_osh_

# ${BLUE}PATH: file://${ram_dir}${NORMAL}
# ${GREEN}NAME: ${ram_name}${NORMAL}
# ${RED}MAIN: ${main_str}${NORMAL}
# ${CYAN}TAGS: ${tags_str}${NORMAL}"

if [[ -z "${ARGS0}" ]]; then
    plt_exit "in ${FNN} : ERR_AMOUNT_ARGS : \${ARGS0} NOT_DEFINE : return 1"
    return 1
fi

# echo -e "${GREEN}\${ARGS0:0:1} = ${ARGS0:0:1}${NORMAL}" #print variable

arr_default_cntl=("-E" "-n" "-an" "-t" "-at" "-t" "-m" "-c")

flag_fail_cntl=0

if [[ "${ARGS0:0:1}" == "-" ]]; then
    flag_fail_cntl=1
    for default_cntl in ${arr_default_cntl[@]}; do

        if [[ "${default_cntl}" == "${ARGS0}" ]]; then
            flag_fail_cntl=0
        fi

    done
fi

if [[ ${flag_fail_cntl} -eq 1 ]]; then
    plt_exit "in ${FNN} : NOT_IN_CONDITION : '\${ARGS0}=${ARGS0}' not in (-n -an -t -at -t -m -c) : return 1"
    return 1
fi

arb_osh_dir=${PLT_PATH}/.d/.arb/osh.arb

if [[ "${ARGS0}" == "-E" ]]; then

    # dir_sil=${SIL_A}
    # dir_arb=${PLT_PATH}/.d/.arb/osh.arb

    # echo -e "${HLIGHT}--- fol_ --_sil ${dir_sil} --_arb ${dir_arb} -_E ---${NORMAL}" #start files

    # fol_ \
    #     --_sil "${dir_sil}" \
    #     --_arb "${dir_arb}" \
    #     -_E

    003_E__d_ax__osh___fn_dir_osh_

    return 0

fi

if [[ "${ARGS0}" == "-t" ]]; then

    if [[ -z "${ARGS1}" ]]; then

        plt_exit "in ${FNN} : NOT_DEFINE : '\${ARGS1} arg to gerp tag' : return 1"
        return 1
    fi

    #! define str_to_grep for infn 002_grep_type__d_ax__osh___fn_dir_osh_ :
    str_to_grep=${ARGS1}

    #! type_fol_to_grep for infn 002_grep_type__d_ax__osh___fn_dir_osh_ as tags.fol
    type_fol_to_grep="tags"

    002_grep_type__d_ax__osh___fn_dir_osh_

    return 0
fi

if [[ "${ARGS0}" == "-m" ]]; then

    if [[ -z "${ARGS1}" ]]; then

        plt_exit "in ${FNN} : NOT_DEFINE : '\${ARGS1} arg to gerp tag' : return 1"
        return 1
    fi

    #! define str_to_grep for infn 002_grep_type__d_ax__osh___fn_dir_osh_ :
    str_to_grep=${ARGS1}

    #! type_fol_to_grep for infn 002_grep_type__d_ax__osh___fn_dir_osh_ as tags.fol
    type_fol_to_grep="main"

    002_grep_type__d_ax__osh___fn_dir_osh_

    return 0
fi

if [[ "${ARGS0}" == "-c" ]]; then

    if [[ -z "${ARGS1}" ]]; then

        plt_exit "in ${FNN} : NOT_DEFINE : '\${ARGS1} arg to gerp tag' : return 1"
        return 1
    fi

    #! define str_to_grep for infn 002_grep_type__d_ax__osh___fn_dir_osh_ :
    str_to_grep=${ARGS1}

    #! type_fol_to_grep for infn 002_grep_type__d_ax__osh___fn_dir_osh_ as tags.fol
    type_fol_to_grep="cont"

    002_grep_type__d_ax__osh___fn_dir_osh_

    return 0
fi

if [[ "${ARGS0}" == "-n" ]]; then

    if [[ -z "${ARGS1}" ]]; then

        plt_exit "in ${FNN} : NOT_DEFINE : '\${ARGS1} arg to gerp tag' : return 1"
        return 1
    fi

    #! define str_to_grep for infn 002_grep_type__d_ax__osh___fn_dir_osh_ :
    str_to_grep=${ARGS1}

    001_grep_name__d_ax__osh___fn_dir_osh_

    return 0
fi

if [[ "${ARGS0}" == "-an" ]]; then

    004_all_name__d_ax__osh___fn_dir_osh_

    return 0
fi

if [[ "${ARGS0}" == "-at" ]]; then

    005_all_tags__d_ax__osh___fn_dir_osh_

    return 0
fi

fn_file=${arb_osh_dir}/${ARGS0}.ram/.grot/${ARGS0}.sh

if ! [[ -f "${fn_file}" ]]; then
    plt_exit "in ${FNN} : NOT_FILE : ${fn_file} return 1"
    return 1
fi

if ! . "${fn_file}"; then
    plt_exit "in ${FNN} : FAIL_EXEC : . ${fn_file}  return 1"
    return 1
fi

echo -e "${HLIGHT}--- exec : ${ARGS[*]} ---${NORMAL}" #start files

"${ARGS[@]}"

unset "${ARGS0}"

#{main_body_fn}

#?---------------------------------------
#?---------------------------------------------
#?--------------------------------------------------------
